// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prototype/operation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "prototype/Operation.pbobjc.h"
 #import "prototype/Type.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - OperationRoot

@implementation OperationRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - OperationRoot_FileDescriptor

static GPBFileDescriptor *OperationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"prototype"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - account_create_operation

@implementation account_create_operation

@dynamic hasFee, fee;
@dynamic hasCreator, creator;
@dynamic hasNewAccountName, newAccountName;
@dynamic hasOwner, owner;
@dynamic jsonMetadata;

typedef struct account_create_operation__storage_ {
  uint32_t _has_storage_[1];
  coin *fee;
  account_name *creator;
  account_name *newAccountName;
  public_key_type *owner;
  NSString *jsonMetadata;
} account_create_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fee",
        .dataTypeSpecific.className = GPBStringifySymbol(coin),
        .number = account_create_operation_FieldNumber_Fee,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(account_create_operation__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "creator",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = account_create_operation_FieldNumber_Creator,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(account_create_operation__storage_, creator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newAccountName",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = account_create_operation_FieldNumber_NewAccountName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(account_create_operation__storage_, newAccountName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(public_key_type),
        .number = account_create_operation_FieldNumber_Owner,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(account_create_operation__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonMetadata",
        .dataTypeSpecific.className = NULL,
        .number = account_create_operation_FieldNumber_JsonMetadata,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(account_create_operation__storage_, jsonMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[account_create_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(account_create_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - transfer_operation

@implementation transfer_operation

@dynamic hasFrom, from;
@dynamic hasTo, to;
@dynamic hasAmount, amount;
@dynamic memo;

typedef struct transfer_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *from;
  account_name *to;
  coin *amount;
  NSString *memo;
} transfer_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = transfer_operation_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(transfer_operation__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = transfer_operation_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(transfer_operation__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = GPBStringifySymbol(coin),
        .number = transfer_operation_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(transfer_operation__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memo",
        .dataTypeSpecific.className = NULL,
        .number = transfer_operation_FieldNumber_Memo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(transfer_operation__storage_, memo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[transfer_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(transfer_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - transfer_to_vesting_operation

@implementation transfer_to_vesting_operation

@dynamic hasFrom, from;
@dynamic hasTo, to;
@dynamic hasAmount, amount;

typedef struct transfer_to_vesting_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *from;
  account_name *to;
  coin *amount;
} transfer_to_vesting_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = transfer_to_vesting_operation_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(transfer_to_vesting_operation__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = transfer_to_vesting_operation_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(transfer_to_vesting_operation__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = GPBStringifySymbol(coin),
        .number = transfer_to_vesting_operation_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(transfer_to_vesting_operation__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[transfer_to_vesting_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(transfer_to_vesting_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - vote_operation

@implementation vote_operation

@dynamic hasVoter, voter;
@dynamic idx;

typedef struct vote_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *voter;
  uint64_t idx;
} vote_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voter",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = vote_operation_FieldNumber_Voter,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(vote_operation__storage_, voter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "idx",
        .dataTypeSpecific.className = NULL,
        .number = vote_operation_FieldNumber_Idx,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(vote_operation__storage_, idx),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[vote_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(vote_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - bp_register_operation

@implementation bp_register_operation

@dynamic hasOwner, owner;
@dynamic URL;
@dynamic desc;
@dynamic hasBlockSigningKey, blockSigningKey;
@dynamic hasProps, props;

typedef struct bp_register_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *owner;
  NSString *URL;
  NSString *desc;
  public_key_type *blockSigningKey;
  chain_properties *props;
} bp_register_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = bp_register_operation_FieldNumber_Owner,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(bp_register_operation__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = bp_register_operation_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(bp_register_operation__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = bp_register_operation_FieldNumber_Desc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(bp_register_operation__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blockSigningKey",
        .dataTypeSpecific.className = GPBStringifySymbol(public_key_type),
        .number = bp_register_operation_FieldNumber_BlockSigningKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(bp_register_operation__storage_, blockSigningKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "props",
        .dataTypeSpecific.className = GPBStringifySymbol(chain_properties),
        .number = bp_register_operation_FieldNumber_Props,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(bp_register_operation__storage_, props),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[bp_register_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(bp_register_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - bp_unregister_operation

@implementation bp_unregister_operation

@dynamic hasOwner, owner;

typedef struct bp_unregister_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *owner;
} bp_unregister_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = bp_unregister_operation_FieldNumber_Owner,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(bp_unregister_operation__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[bp_unregister_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(bp_unregister_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - bp_vote_operation

@implementation bp_vote_operation

@dynamic hasVoter, voter;
@dynamic hasWitness, witness;
@dynamic cancel;

typedef struct bp_vote_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *voter;
  account_name *witness;
} bp_vote_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voter",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = bp_vote_operation_FieldNumber_Voter,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(bp_vote_operation__storage_, voter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "witness",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = bp_vote_operation_FieldNumber_Witness,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(bp_vote_operation__storage_, witness),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cancel",
        .dataTypeSpecific.className = NULL,
        .number = bp_vote_operation_FieldNumber_Cancel,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[bp_vote_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(bp_vote_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - follow_operation

@implementation follow_operation

@dynamic hasAccount, account;
@dynamic hasFAccount, fAccount;
@dynamic cancel;

typedef struct follow_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *account;
  account_name *fAccount;
} follow_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = follow_operation_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(follow_operation__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fAccount",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = follow_operation_FieldNumber_FAccount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(follow_operation__storage_, fAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cancel",
        .dataTypeSpecific.className = NULL,
        .number = follow_operation_FieldNumber_Cancel,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[follow_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(follow_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - contract_deploy_operation

@implementation contract_deploy_operation

@dynamic hasOwner, owner;
@dynamic contract;
@dynamic abi;
@dynamic code;

typedef struct contract_deploy_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *owner;
  NSString *contract;
  NSString *abi;
  NSData *code;
} contract_deploy_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = contract_deploy_operation_FieldNumber_Owner,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(contract_deploy_operation__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contract",
        .dataTypeSpecific.className = NULL,
        .number = contract_deploy_operation_FieldNumber_Contract,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(contract_deploy_operation__storage_, contract),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "abi",
        .dataTypeSpecific.className = NULL,
        .number = contract_deploy_operation_FieldNumber_Abi,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(contract_deploy_operation__storage_, abi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = contract_deploy_operation_FieldNumber_Code,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(contract_deploy_operation__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[contract_deploy_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(contract_deploy_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - contract_apply_operation

@implementation contract_apply_operation

@dynamic hasCaller, caller;
@dynamic hasOwner, owner;
@dynamic contract;
@dynamic method;
@dynamic params;
@dynamic hasAmount, amount;
@dynamic hasGas, gas;

typedef struct contract_apply_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *caller;
  account_name *owner;
  NSString *contract;
  NSString *method;
  NSString *params;
  coin *amount;
  coin *gas;
} contract_apply_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "caller",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = contract_apply_operation_FieldNumber_Caller,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(contract_apply_operation__storage_, caller),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = contract_apply_operation_FieldNumber_Owner,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(contract_apply_operation__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contract",
        .dataTypeSpecific.className = NULL,
        .number = contract_apply_operation_FieldNumber_Contract,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(contract_apply_operation__storage_, contract),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "method",
        .dataTypeSpecific.className = NULL,
        .number = contract_apply_operation_FieldNumber_Method,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(contract_apply_operation__storage_, method),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.className = NULL,
        .number = contract_apply_operation_FieldNumber_Params,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(contract_apply_operation__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = GPBStringifySymbol(coin),
        .number = contract_apply_operation_FieldNumber_Amount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(contract_apply_operation__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gas",
        .dataTypeSpecific.className = GPBStringifySymbol(coin),
        .number = contract_apply_operation_FieldNumber_Gas,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(contract_apply_operation__storage_, gas),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[contract_apply_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(contract_apply_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - internal_contract_apply_operation

@implementation internal_contract_apply_operation

@dynamic hasFromCaller, fromCaller;
@dynamic hasFromOwner, fromOwner;
@dynamic fromContract;
@dynamic fromMethod;
@dynamic hasToOwner, toOwner;
@dynamic toContract;
@dynamic toMethod;
@dynamic params;
@dynamic hasAmount, amount;
@dynamic hasGas, gas;

typedef struct internal_contract_apply_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *fromCaller;
  account_name *fromOwner;
  NSString *fromContract;
  NSString *fromMethod;
  account_name *toOwner;
  NSString *toContract;
  NSString *toMethod;
  NSData *params;
  coin *amount;
  coin *gas;
} internal_contract_apply_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromCaller",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = internal_contract_apply_operation_FieldNumber_FromCaller,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(internal_contract_apply_operation__storage_, fromCaller),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromOwner",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = internal_contract_apply_operation_FieldNumber_FromOwner,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(internal_contract_apply_operation__storage_, fromOwner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromContract",
        .dataTypeSpecific.className = NULL,
        .number = internal_contract_apply_operation_FieldNumber_FromContract,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(internal_contract_apply_operation__storage_, fromContract),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromMethod",
        .dataTypeSpecific.className = NULL,
        .number = internal_contract_apply_operation_FieldNumber_FromMethod,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(internal_contract_apply_operation__storage_, fromMethod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toOwner",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = internal_contract_apply_operation_FieldNumber_ToOwner,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(internal_contract_apply_operation__storage_, toOwner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toContract",
        .dataTypeSpecific.className = NULL,
        .number = internal_contract_apply_operation_FieldNumber_ToContract,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(internal_contract_apply_operation__storage_, toContract),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toMethod",
        .dataTypeSpecific.className = NULL,
        .number = internal_contract_apply_operation_FieldNumber_ToMethod,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(internal_contract_apply_operation__storage_, toMethod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.className = NULL,
        .number = internal_contract_apply_operation_FieldNumber_Params,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(internal_contract_apply_operation__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = GPBStringifySymbol(coin),
        .number = internal_contract_apply_operation_FieldNumber_Amount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(internal_contract_apply_operation__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gas",
        .dataTypeSpecific.className = GPBStringifySymbol(coin),
        .number = internal_contract_apply_operation_FieldNumber_Gas,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(internal_contract_apply_operation__storage_, gas),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[internal_contract_apply_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(internal_contract_apply_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - post_operation

@implementation post_operation

@dynamic uuid;
@dynamic hasOwner, owner;
@dynamic title;
@dynamic content;
@dynamic tagsArray, tagsArray_Count;
@dynamic beneficiariesArray, beneficiariesArray_Count;

typedef struct post_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *owner;
  NSString *title;
  NSString *content;
  NSMutableArray *tagsArray;
  NSMutableArray *beneficiariesArray;
  uint64_t uuid;
} post_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = post_operation_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(post_operation__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = post_operation_FieldNumber_Owner,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(post_operation__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = post_operation_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(post_operation__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = post_operation_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(post_operation__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = NULL,
        .number = post_operation_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(post_operation__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "beneficiariesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(beneficiary_route_type),
        .number = post_operation_FieldNumber_BeneficiariesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(post_operation__storage_, beneficiariesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[post_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(post_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - reply_operation

@implementation reply_operation

@dynamic uuid;
@dynamic hasOwner, owner;
@dynamic content;
@dynamic parentUuid;
@dynamic beneficiariesArray, beneficiariesArray_Count;

typedef struct reply_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *owner;
  NSString *content;
  NSMutableArray *beneficiariesArray;
  uint64_t uuid;
  uint64_t parentUuid;
} reply_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = reply_operation_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(reply_operation__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = reply_operation_FieldNumber_Owner,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(reply_operation__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = reply_operation_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(reply_operation__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parentUuid",
        .dataTypeSpecific.className = NULL,
        .number = reply_operation_FieldNumber_ParentUuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(reply_operation__storage_, parentUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "beneficiariesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(beneficiary_route_type),
        .number = reply_operation_FieldNumber_BeneficiariesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(reply_operation__storage_, beneficiariesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[reply_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(reply_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - claim_all_operation

@implementation claim_all_operation

@dynamic hasAccount, account;

typedef struct claim_all_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *account;
} claim_all_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = claim_all_operation_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(claim_all_operation__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[claim_all_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(claim_all_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - claim_operation

@implementation claim_operation

@dynamic hasAccount, account;
@dynamic amount;

typedef struct claim_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *account;
  uint64_t amount;
} claim_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = claim_operation_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(claim_operation__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = claim_operation_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(claim_operation__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[claim_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(claim_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - report_operation

@implementation report_operation

@dynamic hasReporter, reporter;
@dynamic reported;
@dynamic reportTagArray, reportTagArray_Count;
@dynamic isArbitration;
@dynamic isApproved;

typedef struct report_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *reporter;
  GPBEnumArray *reportTagArray;
  uint64_t reported;
} report_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reporter",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = report_operation_FieldNumber_Reporter,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(report_operation__storage_, reporter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reported",
        .dataTypeSpecific.className = NULL,
        .number = report_operation_FieldNumber_Reported,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(report_operation__storage_, reported),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "reportTagArray",
        .dataTypeSpecific.enumDescFunc = report_operation_tag_EnumDescriptor,
        .number = report_operation_FieldNumber_ReportTagArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(report_operation__storage_, reportTagArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isArbitration",
        .dataTypeSpecific.className = NULL,
        .number = report_operation_FieldNumber_IsArbitration,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isApproved",
        .dataTypeSpecific.className = NULL,
        .number = report_operation_FieldNumber_IsApproved,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[report_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(report_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum report_operation_tag

GPBEnumDescriptor *report_operation_tag_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ChildPornography\000Racism\000Reactionary\000Plag"
        "iarism\000Slander\000FalsePropaganda\000Pornograp"
        "hy\000";
    static const int32_t values[] = {
        report_operation_tag_ChildPornography,
        report_operation_tag_Racism,
        report_operation_tag_Reactionary,
        report_operation_tag_Plagiarism,
        report_operation_tag_Slander,
        report_operation_tag_FalsePropaganda,
        report_operation_tag_Pornography,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(report_operation_tag)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:report_operation_tag_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL report_operation_tag_IsValidValue(int32_t value__) {
  switch (value__) {
    case report_operation_tag_ChildPornography:
    case report_operation_tag_Racism:
    case report_operation_tag_Reactionary:
    case report_operation_tag_Plagiarism:
    case report_operation_tag_Slander:
    case report_operation_tag_FalsePropaganda:
    case report_operation_tag_Pornography:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - convert_vesting_operation

@implementation convert_vesting_operation

@dynamic hasFrom, from;
@dynamic hasAmount, amount;

typedef struct convert_vesting_operation__storage_ {
  uint32_t _has_storage_[1];
  account_name *from;
  vest *amount;
} convert_vesting_operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = convert_vesting_operation_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(convert_vesting_operation__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = GPBStringifySymbol(vest),
        .number = convert_vesting_operation_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(convert_vesting_operation__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[convert_vesting_operation class]
                                     rootClass:[OperationRoot class]
                                          file:OperationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(convert_vesting_operation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
