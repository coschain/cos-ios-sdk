// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prototype/multi_id.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "prototype/MultiId.pbobjc.h"
 #import "prototype/Type.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MultiIdRoot

@implementation MultiIdRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MultiIdRoot_FileDescriptor

static GPBFileDescriptor *MultiIdRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"prototype"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - follower_relation

@implementation follower_relation

@dynamic hasAccount, account;
@dynamic hasFollower, follower;

typedef struct follower_relation__storage_ {
  uint32_t _has_storage_[1];
  account_name *account;
  account_name *follower;
} follower_relation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = follower_relation_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(follower_relation__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "follower",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = follower_relation_FieldNumber_Follower,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(follower_relation__storage_, follower),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[follower_relation class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(follower_relation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - following_relation

@implementation following_relation

@dynamic hasAccount, account;
@dynamic hasFollowing, following;

typedef struct following_relation__storage_ {
  uint32_t _has_storage_[1];
  account_name *account;
  account_name *following;
} following_relation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = following_relation_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(following_relation__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "following",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = following_relation_FieldNumber_Following,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(following_relation__storage_, following),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[following_relation class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(following_relation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - follower_created_order

@implementation follower_created_order

@dynamic hasAccount, account;
@dynamic hasCreatedTime, createdTime;
@dynamic hasFollower, follower;

typedef struct follower_created_order__storage_ {
  uint32_t _has_storage_[1];
  account_name *account;
  time_point_sec *createdTime;
  account_name *follower;
} follower_created_order__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = follower_created_order_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(follower_created_order__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdTime",
        .dataTypeSpecific.className = GPBStringifySymbol(time_point_sec),
        .number = follower_created_order_FieldNumber_CreatedTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(follower_created_order__storage_, createdTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "follower",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = follower_created_order_FieldNumber_Follower,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(follower_created_order__storage_, follower),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[follower_created_order class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(follower_created_order__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - following_created_order

@implementation following_created_order

@dynamic hasAccount, account;
@dynamic hasCreatedTime, createdTime;
@dynamic hasFollowing, following;

typedef struct following_created_order__storage_ {
  uint32_t _has_storage_[1];
  account_name *account;
  time_point_sec *createdTime;
  account_name *following;
} following_created_order__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = following_created_order_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(following_created_order__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdTime",
        .dataTypeSpecific.className = GPBStringifySymbol(time_point_sec),
        .number = following_created_order_FieldNumber_CreatedTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(following_created_order__storage_, createdTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "following",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = following_created_order_FieldNumber_Following,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(following_created_order__storage_, following),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[following_created_order class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(following_created_order__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - post_created_order

@implementation post_created_order

@dynamic hasCreated, created;
@dynamic parentId;

typedef struct post_created_order__storage_ {
  uint32_t _has_storage_[1];
  time_point_sec *created;
  uint64_t parentId;
} post_created_order__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "created",
        .dataTypeSpecific.className = GPBStringifySymbol(time_point_sec),
        .number = post_created_order_FieldNumber_Created,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(post_created_order__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "parentId",
        .dataTypeSpecific.className = NULL,
        .number = post_created_order_FieldNumber_ParentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(post_created_order__storage_, parentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[post_created_order class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(post_created_order__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - voter_id

@implementation voter_id

@dynamic hasVoter, voter;
@dynamic postId;

typedef struct voter_id__storage_ {
  uint32_t _has_storage_[1];
  account_name *voter;
  uint64_t postId;
} voter_id__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voter",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = voter_id_FieldNumber_Voter,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(voter_id__storage_, voter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "postId",
        .dataTypeSpecific.className = NULL,
        .number = voter_id_FieldNumber_PostId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(voter_id__storage_, postId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[voter_id class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(voter_id__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - bp_voter_id

@implementation bp_voter_id

@dynamic hasVoter, voter;
@dynamic hasWitness, witness;

typedef struct bp_voter_id__storage_ {
  uint32_t _has_storage_[1];
  account_name *voter;
  account_name *witness;
} bp_voter_id__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voter",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = bp_voter_id_FieldNumber_Voter,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(bp_voter_id__storage_, voter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "witness",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = bp_voter_id_FieldNumber_Witness,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(bp_voter_id__storage_, witness),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[bp_voter_id class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(bp_voter_id__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - bp_witness_id

@implementation bp_witness_id

@dynamic hasVoter, voter;
@dynamic hasWitness, witness;

typedef struct bp_witness_id__storage_ {
  uint32_t _has_storage_[1];
  account_name *voter;
  account_name *witness;
} bp_witness_id__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voter",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = bp_witness_id_FieldNumber_Voter,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(bp_witness_id__storage_, voter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "witness",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = bp_witness_id_FieldNumber_Witness,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(bp_witness_id__storage_, witness),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[bp_witness_id class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(bp_witness_id__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - contract_id

@implementation contract_id

@dynamic hasOwner, owner;
@dynamic cname;

typedef struct contract_id__storage_ {
  uint32_t _has_storage_[1];
  account_name *owner;
  NSString *cname;
} contract_id__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = contract_id_FieldNumber_Owner,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(contract_id__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cname",
        .dataTypeSpecific.className = NULL,
        .number = contract_id_FieldNumber_Cname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(contract_id__storage_, cname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[contract_id class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(contract_id__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - contract_data_id

@implementation contract_data_id

@dynamic hasOwner, owner;
@dynamic cname;
@dynamic pos;

typedef struct contract_data_id__storage_ {
  uint32_t _has_storage_[1];
  int32_t pos;
  account_name *owner;
  NSString *cname;
} contract_data_id__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = contract_data_id_FieldNumber_Owner,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(contract_data_id__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cname",
        .dataTypeSpecific.className = NULL,
        .number = contract_data_id_FieldNumber_Cname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(contract_data_id__storage_, cname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pos",
        .dataTypeSpecific.className = NULL,
        .number = contract_data_id_FieldNumber_Pos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(contract_data_id__storage_, pos),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[contract_data_id class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(contract_data_id__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - reply_created_order

@implementation reply_created_order

@dynamic parentId;
@dynamic hasCreated, created;

typedef struct reply_created_order__storage_ {
  uint32_t _has_storage_[1];
  time_point_sec *created;
  uint64_t parentId;
} reply_created_order__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentId",
        .dataTypeSpecific.className = NULL,
        .number = reply_created_order_FieldNumber_ParentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(reply_created_order__storage_, parentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = GPBStringifySymbol(time_point_sec),
        .number = reply_created_order_FieldNumber_Created,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(reply_created_order__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[reply_created_order class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(reply_created_order__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - user_post_create_order

@implementation user_post_create_order

@dynamic hasAuthor, author;
@dynamic hasCreate, create;

typedef struct user_post_create_order__storage_ {
  uint32_t _has_storage_[1];
  account_name *author;
  time_point_sec *create;
} user_post_create_order__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "author",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = user_post_create_order_FieldNumber_Author,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(user_post_create_order__storage_, author),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "create",
        .dataTypeSpecific.className = GPBStringifySymbol(time_point_sec),
        .number = user_post_create_order_FieldNumber_Create,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(user_post_create_order__storage_, create),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[user_post_create_order class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(user_post_create_order__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - reward_cashout_id

@implementation reward_cashout_id

@dynamic hasAccount, account;
@dynamic postId;

typedef struct reward_cashout_id__storage_ {
  uint32_t _has_storage_[1];
  account_name *account;
  uint64_t postId;
} reward_cashout_id__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = reward_cashout_id_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(reward_cashout_id__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "postId",
        .dataTypeSpecific.className = NULL,
        .number = reward_cashout_id_FieldNumber_PostId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(reward_cashout_id__storage_, postId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[reward_cashout_id class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(reward_cashout_id__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - user_trx_create_order

@implementation user_trx_create_order

@dynamic hasCreator, creator;
@dynamic hasCreateTime, createTime;

typedef struct user_trx_create_order__storage_ {
  uint32_t _has_storage_[1];
  account_name *creator;
  time_point_sec *createTime;
} user_trx_create_order__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "creator",
        .dataTypeSpecific.className = GPBStringifySymbol(account_name),
        .number = user_trx_create_order_FieldNumber_Creator,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(user_trx_create_order__storage_, creator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = GPBStringifySymbol(time_point_sec),
        .number = user_trx_create_order_FieldNumber_CreateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(user_trx_create_order__storage_, createTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[user_trx_create_order class]
                                     rootClass:[MultiIdRoot class]
                                          file:MultiIdRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(user_trx_create_order__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
